// Import Libraries 
import org.jlab.jnp.hipo4.io.*; 
import org.jlab.jnp.hipo4.data.*;
import org.jlab.groot.data.*;
import org.jlab.groot.graphics.*;
import org.jlab.groot.math.*;
import org.jlab.groot.ui.*;
import org.jlab.clas.physics.*;
import org.jlab.clas.physics.LorentzVector;
import org.jlab.clas.physics.PhysicsEvent;
import org.jlab.clas.physics.Particle;
import org.jlab.clas.physics.EventFilter;
import org.jlab.physics.io.DataManager;
//---------------------------------------------------------------------
// Create HipoReader object and load in file. Create event class and bank instance.
HipoReader reader = new HipoReader(); 
reader.open("/home/grassla/SimOuts.hipo"); 
Event     event = new Event(); 
Bank  gen = new Bank(reader.getSchemaFactory().getSchema("MC::Particle"));
Bank  particles = new Bank(reader.getSchemaFactory().getSchema("REC::Particle"));
//---------------------------------------------------------------------
// Create variables.
int counter = 0;
int elec = 0;
int pro = 0;
int event_elec = 0;
int event_pro = 0;
double beta_calc = 0;
double deltabeta = 0;
double deltabeta_pro = 0;
double p = 0;
double pT = 0;
double pT_gen = 0;
int num_events = 0;
int num_events_count = 0; 


//---------------------------------------------------------------------
// Create 3- and 4-Vectors.
LorentzVector  vBeam   = new LorentzVector(0.0,0.0,10.6,10.6);
LorentzVector  vTarget = new LorentzVector(0.0,0.0,0.0,0.938);
LorentzVector electron = new LorentzVector(); 
LorentzVector electron_gen = new LorentzVector();
// LorentzVector proton = new LorentzVector(); 
LorentzVector proton_gen = new LorentzVector(); 
LorentzVector       vW = new LorentzVector(); 
LorentzVector      vQ2 = new LorentzVector();
Vector3 v3Parts   = new Vector3(0.0,0.0,0.0);
//---------------------------------------------------------------------
PhysicsEvent physEvent = DataManager.getPhysicsEvent(10.6,particles);
// Loop through events from Reconstructed bank and fill histograms.
EventFilter  all = new EventFilter("X+:X-:Xn");
EventFilter  only_elec = new EventFilter("11:X+:X-:Xn");
EventFilter  only_pro = new EventFilter("2212:X+:X-:Xn");
reader.getEvent(event,0);  
while(reader.hasNext()==true){ //not this pull one event
     reader.nextEvent(event);
     event.read(particles);
     Particle Proton = physEvent.getParticle("2212");
     Particle Electron = physEvent.getParticle("11");
     if(all.isValid(physEvent)==true){
          for(int i = 0; i < particles.getRows(); i++) {
          int pid = particles.getInt("pid",i);
          if(particles.getFloat("beta", i)>0){
             v3Parts.setXYZ(
                particles.getFloat("px",i), 
                particles.getFloat("py",i),
                particles.getFloat("pz",i) );

              pT = Math.sqrt(particles.getFloat("px",i)*particles.getFloat("px",i)+particles.getFloat("py",i)*particles.getFloat("py",i));
              hpT.fill(pT);
              p  = v3Parts.mag();
              beta_calc = p / Math.sqrt(p*p + 0.938*0.938);
              deltabeta = particles.getFloat("beta",i) - beta_calc ;
              hbeta.fill(particles.getFloat("beta",i));
              hbeta_calc.fill(beta_calc);
              hdeltabeta.fill(deltabeta); 
              hdeltabetavPTot.fill(v3Parts.mag(),deltabeta);
              }
          }
     }
     if(only_pro.isValid(physEvent)==true){                                // comment this out to see other particles           
          for(int i = 0; i < particles.getRows(); i++) {
          int pid = particles.getInt("pid",i);
          if(particles.getFloat("beta", i)>0){
             v3Parts.setXYZ(
                particles.getFloat("px",i), 
                particles.getFloat("py",i),
                particles.getFloat("pz",i) );

                 hBetaVsPTot.fill(v3Parts.mag(),particles.getFloat("beta",i)); 
                 hP_pro.fill(v3Parts.mag()); 
                 hdeltabeta_provPTot.fill(v3Parts.mag(),deltabeta_pro); 


                LorentzVector pro_L = physEvent.getParticle("[2212]").vector();
                pro_L.setPxPyPzM(
                  particles.getFloat("px",i), 
                  particles.getFloat("py",i),
                  particles.getFloat("pz",i),
                  0.938
                 );
          htheta.fill(pro_L.theta()*(180/3.1415));
          hphi.fill(pro_L.phi()*(180/3.1415));
       // take below out of pro loop?

          hnu.fill(vBeam.e() - electron.e());
          hZ.fill(pro_L.e() / (vBeam.e() - electron.e()));
          hY.fill((vBeam.e() - electron.e()) / vBeam.e());
          hX.fill(-vQ2.mass2() / (2 * 0.938 * (vBeam.e() - electron.e()))); 
          } // also comment this out for other particles
          }
          }
          

          if(only_elec.isValid(physEvent)==true){
          for(int i = 0; i < particles.getRows(); i++) {
          int pid = particles.getInt("pid",i);
          if(particles.getFloat("beta", i)>0){
             v3Parts.setXYZ(
                particles.getFloat("px",i), 
                particles.getFloat("py",i),
                particles.getFloat("pz",i) );
             hP_elec.fill(v3Parts.mag());
             electron.setPxPyPzM(
                 particles.getFloat("px",i), 
                  particles.getFloat("py",i),
                  particles.getFloat("pz",i),
                  0.0005
                 );  
            htheta_elec.fill(electron.theta()*(180/3.1415));
            hphi_elec.fill(electron.phi()*(180/3.1415));
            vW.copy(vBeam);
            vW.add(vTarget);
            vW.sub(electron);
            vQ2.copy(vBeam);
            vQ2.sub(electron); 
            hW.fill(vW.mass());
            hQ2.fill(-vQ2.mass2());
            hQ2vW.fill(vW.mass(),-vQ2.mass2()); }
         
       } //here
     }



//---------------------------------------------------------------------
// Loop through events from Generated bank and fill histograms.
     event.read(gen);
     if(gen.getRows()>0){
      if(only_elec.isValid(physEvent)==true){
          for(int i = 0; i < particles.getRows(); i++) {
          int pid = particles.getInt("pid",i);
             electron_gen.setPxPyPzM(
                  gen.getFloat("px",i), 
                  gen.getFloat("py",i),
                  gen.getFloat("pz",i),
                  0.0005
                 );
            hP_elec_gen.fill(electron_gen.p());
            htheta_elec_gen.fill(electron_gen.theta()*(180/3.1415));
            hphi_elec_gen.fill(electron_gen.phi()*(180/3.1415)); 
            vW.copy(vBeam);
            vW.add(vTarget);
            vW.sub(electron);
            vQ2.copy(vBeam);
            vQ2.sub(electron_gen);
            hW_gen.fill(vW.mass());
            hQ2_gen.fill(-vQ2.mass2());
            hQ2vW_gen.fill(vW.mass(),-vQ2.mass2());   
         }
     }
       if(only_pro.isValid(physEvent)==true){
          for(int i = 0; i < particles.getRows(); i++) {
          int pid = particles.getInt("pid",i);
                proton_gen.setPxPyPzM(
                  particles.getFloat("px",i), 
                  particles.getFloat("py",i),
                  particles.getFloat("pz",i),
                  0.938
                 ); 
          hP_pro_gen.fill(proton_gen.p());
          htheta_gen.fill(proton_gen.theta()*(180/3.1415));
          hphi_gen.fill(proton_gen.phi()*(180/3.1415));
          }
     }
      if(all.isValid(physEvent)==true){
          for(int i = 0; i < particles.getRows(); i++) {
          int pid = particles.getInt("pid",i);
             v3Parts.setXYZ(
                particles.getFloat("px",i), 
                particles.getFloat("py",i),
                particles.getFloat("pz",i) );
                pT_gen = Math.sqrt(gen.getFloat("px",i)*gen.getFloat("px",i)+gen.getFloat("py",i)*gen.getFloat("py",i)); 
                hpT_gen.fill(pT_gen);  
          hnu_gen.fill(vBeam.e() - electron_gen.e());
          hZ_gen.fill(proton_gen.e() / (vBeam.e() - electron_gen.e()));
          hY_gen.fill((vBeam.e() - electron_gen.e()) / vBeam.e());
          hX_gen.fill(-vQ2.mass2() / (2 * 0.938 * (vBeam.e() - electron_gen.e())));
       }
     }
}
}
