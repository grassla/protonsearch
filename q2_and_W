import org.jlab.jnp.hipo4.io.*; 
import org.jlab.jnp.hipo4.data.*;
import org.jlab.groot.data.*;
import org.jlab.groot.graphics.*;
import org.jlab.groot.math.*;
import org.jlab.groot.ui.*;
import org.jlab.clas.physics.*;
import org.jlab.clas.physics.LorentzVector;
import org.jlab.clas.physics.PhysicsEvent;
import org.jlab.clas.physics.Particle;
import org.jlab.clas.physics.EventFilter;
  
// Create the reader and load in the file

HipoReader reader = new HipoReader(); 
reader.open("/home/grassla/coatjava/bin/SimOuts.hipo"); 
 
Event     event = new Event(); 
Bank  particles = new Bank(reader.getSchemaFactory().getSchema("REC::Particle"));
 
// Loop over the events in the file and read particle bank and check for electron in the first raw, 
// if there is one we can create lorentz vector for the particle and calculate W2 and Q2, and plot it. 
// First we will declare histogram objects and canvas object:

H1F  hW = new H1F("hW" ,100, 0.5, 8.0);
H1F hQ2 = new H1F("hQ2",100, 0.1, 8.0);
hW.setTitleX("W [GeV]");
hQ2.setTitleX("Q^2 [GeV/c^2]");
H2F hBetaVsPTot = new H2F("hBetaVsPTot" , 100, 0.0, 10.0, 100, 0.5, 1.50);
hBetaVsPTot.setTitleX("P [GeV]");
hBetaVsPTot.setTitleY("#beta");
H2F  hQ2vW = new H2F("hQ2vW" , 100, 0.5, 5.0, 100, 0.5, 4.0);
hQ2vW.setTitleX("W [GeV]");
hQ2vW.setTitleY("Q^2 [GeV/c^2]");


Vector3 v3Parts   = new Vector3(0.0,0.0,0.0);

TCanvas ec = new TCanvas("ec",800,800);
 
// Loop over the events and count how many events we have where at least one electron and at least two pos and neg pions are detected.

int counter = 0;
int elec = 0;
int proton = 0;
int event_elec = 0;
int event_proton = 0;

  
while(reader.hasNext()==true){
     reader.nextEvent(event);
     event.read(particles);
     if(particles.getRows()>0){
        event_elec = 0;
        event_proton = 0;
        for(int i = 0; i < particles.getRows(); i++) {
        
        // also extract beta
        // get total momentum (add up px py pz?)
        // do before pid stuff because particles should be identifyible w/out pid
          v3Parts.setXYZ(
            particles.getFloat("px",i), 
            particles.getFloat("py",i),
            particles.getFloat("pz",i) );
          if(particles.getFloat("beta", i)>0){
            hBetaVsPTot.fill(v3Parts.mag(),particles.getFloat("beta",i)); 
          // double ptot = Math.sqrt(px*px + py*py + pz*pz);
          
          int pid = particles.getInt("pid",i);
              if(pid == 11) event_elec++;
              if(pid == 2212) event_proton++;
        }
     if(event_elec>=1&&event_proton>=1){
          counter++;
          }
          elec = elec + event_elec;
          proton = proton + event_proton;
     }
  }
}

System.out.println("processed # " + counter + " , electrons : " + elec + " , protons : " + proton );
 
// Loop over the events and calculate Q2 and W from the LorentzVectors 

LorentzVector  vBeam   = new LorentzVector(0.0,0.0,10.6,10.6);
LorentzVector  vTarget = new LorentzVector(0.0,0.0,0.0,0.938);
LorentzVector electron = new LorentzVector(); 
LorentzVector       vW = new LorentzVector(); 
LorentzVector      vQ2 = new LorentzVector();

// Read the first event and reset to the begining of the file

reader.getEvent(event,0); 
  
while(reader.hasNext()==true){
     reader.nextEvent(event);
     event.read(particles);
     if(particles.getRows()>0){
        for(int i = 0; i < particles.getRows(); i++) {
          int pid = particles.getInt("pid",i);
            if(pid==11){
             electron.setPxPyPzM(
                 particles.getFloat("px",i), 
                  particles.getFloat("py",i),
                  particles.getFloat("pz",i),
                  0.0005
                 );
             
            vW.copy(vBeam);
            vW.add(vTarget);
            vW.sub(electron);
             
            vQ2.copy(vBeam);
            vQ2.sub(electron);
             
            hW.fill(vW.mass());
            hQ2.fill(-vQ2.mass2());
            hQ2vW.fill(vW.mass(),-vQ2.mass());
         }
       }
     }
}
  
ec.divide(2,2);
  
ec.cd(0).draw(hW);
ec.cd(1).draw(hQ2);
ec.cd(2).draw(hBetaVsPTot);
ec.cd(3).draw(hQ2vW);
