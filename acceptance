import org.jlab.jnp.hipo4.io.*; 
import org.jlab.jnp.hipo4.data.*;
import org.jlab.groot.data.*;
import org.jlab.groot.graphics.*;
import org.jlab.groot.math.*;
import org.jlab.groot.ui.*;
import org.jlab.clas.physics.*;
import org.jlab.clas.physics.LorentzVector;
import org.jlab.clas.physics.PhysicsEvent;
import org.jlab.clas.physics.Particle;
import org.jlab.clas.physics.EventFilter;
//---------------------------------------------------------------------
HipoReader reader = new HipoReader(); 
reader.open("/home/grassla/coatjava/bin/SimOuts.hipo"); 
 
Event     event = new Event(); 
Bank  gen = new Bank(reader.getSchemaFactory().getSchema("MC::Particle"));
Bank  particles = new Bank(reader.getSchemaFactory().getSchema("REC::Particle"));
//----------------------------------------------------------------------
H1F  hW = new H1F("hW" ,100, 0.5, 8.0);
H1F hQ2 = new H1F("hQ2",100, 0.1, 8.0);
hW.setTitleX("W [GeV]");
hW.setTitle("Reconstructed W");
hQ2.setTitleX("Q^2 [GeV/c^2]");
hQ2.setTitle("Reconstructed Q^2");
H2F hBetaVsPTot = new H2F("hBetaVsPTot" , 100, 0.0, 10.0, 100, 0.5, 1.05);
hBetaVsPTot.setTitleX("P [GeV]");
hBetaVsPTot.setTitleY("#beta");
H2F  hQ2vW = new H2F("hQ2vW" , 100, 0.5, 5.0, 100, 0.5, 4.0);
hQ2vW.setTitleX("W [GeV]");
hQ2vW.setTitleY("Q^2 [GeV/c^2]");

H1F  hW_gen = new H1F("hW_gen" ,100, 0.5, 8.0);
H1F hQ2_gen = new H1F("hQ2_gen",100, 0.1, 8.0);
hW_gen.setTitleX("W [GeV]");
hW_gen.setTitle("Generated W");
hQ2_gen.setTitleX("Q^2 [GeV/c^2]");
hQ2_gen.setTitle("Generated Q^2");
H2F  hQ2vW_gen = new H2F("hQ2vW_gen" , 100, 0.5, 5.0, 100, 0.5, 4.0);
hQ2vW_gen.setTitleX("W [GeV]");
hQ2vW_gen.setTitleY("Q^2 [GeV/c^2]");
//---------------------------------------------------------------------
Vector3 v3Parts   = new Vector3(0.0,0.0,0.0);

TCanvas ec = new TCanvas("ec",800,800);
TCanvas fc = new TCanvas("fc",900,300);
TCanvas gc = new TCanvas("gc",300,900);
TCanvas hc = new TCanvas("hc",300,900);
//---------------------------------------------------------------------
int counter = 0;
int elec = 0;
int proton = 0;
int event_elec = 0;
int event_proton = 0;

while(reader.hasNext()==true){
     reader.nextEvent(event);
     event.read(particles);
     if(particles.getRows()>0){
        event_elec = 0;
        event_proton = 0;
        for(int i = 0; i < particles.getRows(); i++) {
          int pid = particles.getInt("pid",i);
          if(particles.getFloat("beta", i)>0){
            if(pid == 2212){
              v3Parts.setXYZ(
                particles.getFloat("px",i), 
                particles.getFloat("py",i),
                particles.getFloat("pz",i) );           
              hBetaVsPTot.fill(v3Parts.mag(),particles.getFloat("beta",i)); }
              if(pid == 11) event_elec++;
              if(pid == 2212) event_proton++;
        }
     if(event_elec>=1&&event_proton>=1){
          counter++;        
          elec = elec + event_elec;
          proton = proton + event_proton; }
     }
  }
}

System.out.println("processed # " + counter + " , electrons : " + elec + " , protons : " + proton ); 
//---------------------------------------------------------------------
LorentzVector  vBeam   = new LorentzVector(0.0,0.0,10.6,10.6);
LorentzVector  vTarget = new LorentzVector(0.0,0.0,0.0,0.938);
LorentzVector electron = new LorentzVector(); 
LorentzVector       vW = new LorentzVector(); 
LorentzVector      vQ2 = new LorentzVector();
//---------------------------------------------------------------------
reader.getEvent(event,0);  
while(reader.hasNext()==true){
     reader.nextEvent(event);
     event.read(particles);
     if(particles.getRows()>0){
        for(int i = 0; i < particles.getRows(); i++) {
          int pid = particles.getInt("pid",i);
            if(pid==11){
             electron.setPxPyPzM(
                 particles.getFloat("px",i), 
                  particles.getFloat("py",i),
                  particles.getFloat("pz",i),
                  0.0005
                 );             
            vW.copy(vBeam);
            vW.add(vTarget);
            vW.sub(electron);
             
            vQ2.copy(vBeam);
            vQ2.sub(electron);
             
            hW.fill(vW.mass());
            hQ2.fill(-vQ2.mass2());
            hQ2vW.fill(vW.mass(),-vQ2.mass());
         }
       }
     }
//---------------------------------------------------------------------
     event.read(gen);
     if(gen.getRows()>0){
        for(int i = 0; i < gen.getRows(); i++) {
          int pid = gen.getInt("pid",i);
            if(pid==11){
             electron.setPxPyPzM(
                  gen.getFloat("px",i), 
                  gen.getFloat("py",i),
                  gen.getFloat("pz",i),
                  0.0005
                 );
             
            vW.copy(vBeam);
            vW.add(vTarget);
            vW.sub(electron);
             
            vQ2.copy(vBeam);
            vQ2.sub(electron);
             
            hW_gen.fill(vW.mass());
            hQ2_gen.fill(-vQ2.mass2());
            hQ2vW_gen.fill(vW.mass(),-vQ2.mass());
            
            
         }
       }
     }
//-------------------------------------------------------------
}

H1F hW_acc=hW.histClone("hW_acc");
hW_acc.divide(hW_gen);
hW_acc.setTitleX("W [GeV]");
hW_acc.setTitle("Acceptance W");
H1F hQ2_acc=hQ2.histClone("hQ2_acc");
hQ2_acc.divide(hQ2_gen); 
hQ2_acc.setTitleX("Q^2 [GeV/c^2]");
hQ2_acc.setTitle("Acceptance Q^2");
 
hW.setFillColor(33);
hW_gen.setFillColor(33);
hW_acc.setFillColor(33);
hQ2.setFillColor(44);
hQ2_gen.setFillColor(44);
hQ2_acc.setFillColor(44);

ec.divide(2,2);
ec.cd(0).draw(hW);
ec.cd(1).draw(hQ2);
ec.cd(2).draw(hBetaVsPTot);
ec.cd(3).draw(hQ2vW);

fc.divide(3,1);
fc.cd(0).draw(hW_gen);
fc.cd(1).draw(hQ2_gen);
fc.cd(2).draw(hQ2vW_gen);

gc.divide(1,3);
gc.cd(0).draw(hW);
gc.cd(1).draw(hW_gen);
gc.cd(2).draw(hW_acc);

hc.divide(1,3);
hc.cd(0).draw(hQ2);
hc.cd(1).draw(hQ2_gen);
hc.cd(2).draw(hQ2_acc);

//can.cd(0).draw(hRandGauss);
 
// Declare the directory where the histogram will be saved in the file
//TDirectory dir = new TDirectory();
//dir.mkdir("/Gaussian");
//dir.cd("Gaussian");
 
//dir.addDataSet(hRandGauss);       // add the histogram to the directory
//String histFile = "myfile.hipo";  // declare the output file name
//dir.writeFile(histFile);          // write the file
