import org.jlab.jnp.hipo4.io.*; 
import org.jlab.jnp.hipo4.data.*;
import org.jlab.groot.data.*;
import org.jlab.groot.graphics.*;
import org.jlab.groot.math.*;
import org.jlab.groot.ui.*;
import org.jlab.clas.physics.*;
import org.jlab.clas.physics.LorentzVector;
import org.jlab.clas.physics.PhysicsEvent;
import org.jlab.clas.physics.Particle;
import org.jlab.clas.physics.EventFilter;
//---------------------------------------------------------------------
HipoReader reader = new HipoReader(); 
reader.open("/home/grassla/coatjava/bin/SimOuts.hipo"); 
 
Event     event = new Event(); 
Bank  gen = new Bank(reader.getSchemaFactory().getSchema("MC::Particle"));
Bank  particles = new Bank(reader.getSchemaFactory().getSchema("REC::Particle"));
//----------------------------------------------------------------------
H1F  hW = new H1F("hW" ,100, 0.5, 8.0);
H1F hQ2 = new H1F("hQ2",100, 0.1, 8.0);
hW.setTitleX("W [GeV]");
hW.setTitle("Reconstructed W");
hQ2.setTitleX("Q^2 [GeV/c^2]");
hQ2.setTitle("Reconstructed Q^2");
H2F hBetaVsPTot = new H2F("hBetaVsPTot" , 100, 0.0, 10.0, 100, 0.5, 1.05);
hBetaVsPTot.setTitleX("P [GeV]");
hBetaVsPTot.setTitleY("#beta");
hBetaVsPTot.setTitle("Beta v Total Momentum, Reconstructed");
H2F  hQ2vW = new H2F("hQ2vW" , 100, 0.5, 5.0, 100, 0.5, 4.0);
hQ2vW.setTitleX("W [GeV]");
hQ2vW.setTitleY("Q^2 [GeV/c^2]");
hQ2vW.setTitle("Q^2 v W, Reconstructed");

H1F  hW_gen = new H1F("hW_gen" ,100, 0.5, 8.0);
H1F hQ2_gen = new H1F("hQ2_gen",100, 0.1, 8.0);
hW_gen.setTitleX("W [GeV]");
hW_gen.setTitle("Generated W");
hQ2_gen.setTitleX("Q^2 [GeV/c^2]");
hQ2_gen.setTitle("Generated Q^2");
H2F  hQ2vW_gen = new H2F("hQ2vW_gen" , 100, 0.5, 5.0, 100, 0.5, 4.0);
hQ2vW_gen.setTitleX("W [GeV]");
hQ2vW_gen.setTitleY("Q^2 [GeV/c^2]");
hQ2vW_gen.setTitle("Q^2 v W, Generated");

H1F htheta = new H1F("htheta" ,90,0.0,90);
H1F htheta_gen = new H1F("htheta_gen" ,90,0.0,90);
H1F hphi = new H1F("hphi" ,180,-180,180);
H1F hphi_gen = new H1F("hphi_gen" ,180,-180,180);

H1F hbeta = new H1F("hbeta" ,100,0.0,1.5);
H1F hbeta_calc = new H1F("hbeta_calc" ,100,0.0,1.5);
H1F hdeltabeta = new H1F("hdeltabeta" ,100,-2.0,2.0);

H1F htheta_elec = new H1F("htheta" ,90,0.0,90);
H1F htheta_gen_elec = new H1F("htheta_gen" ,90,0.0,90);
H1F hphi_elec = new H1F("hphi" ,180,-180,180);
H1F hphi_gen_elec = new H1F("hphi_gen" ,180,-180,180);

//H2F hdeltabetavPTot = new H2F("hdeltabetavPTot" , 100,-2.0,2.0,100,0.5.1.05);
//hdeltavetavPTot.setTitleX("Change in P [GeV]");
//hdeltabetavPTot.setTitleY("#beta");
//hdeltabetaPTot.setTitle("Delta Beta v Total Momentum");

//H1F hP_pro = new H1F("hP_pro" ,100,0.5,1.05);
//H1F hP_elec = new H1F("hP_elec" ,100,0.5,1.05);
//H1F hP_pro_gen = new H1F("hP_pro_gen" ,100,0.5,1.05);
//H1F hP_elec_gen = new H1F("hP_elec_gen" ,100,0.5,1.05);
//---------------------------------------------------------------------
Vector3 v3Parts   = new Vector3(0.0,0.0,0.0);

TCanvas REC = new TCanvas("REC",800,800);
TCanvas GEN = new TCanvas("GEN",900,300);
TCanvas W = new TCanvas("W",300,900);
TCanvas Q2 = new TCanvas("Q2",300,900);
TCanvas angles = new TCanvas("angles",800,800);
TCanvas Tbeta = new TCanvas("Tbeta",800,800);
TCanvas P = new TCanvas("P",600,600);
//---------------------------------------------------------------------
int counter = 0;
int elec = 0;
int proton = 0;
int event_elec = 0;
int event_proton = 0;
double beta_calc = 0;
double deltabeta = 0;
double p = 0;

while(reader.hasNext()==true){
     reader.nextEvent(event);
     event.read(particles);
     if(particles.getRows()>0){
        event_elec = 0;
        event_proton = 0;
        for(int i = 0; i < particles.getRows(); i++) {
          int pid = particles.getInt("pid",i);
          if(particles.getFloat("beta", i)>0){
             v3Parts.setXYZ(
                particles.getFloat("px",i), 
                particles.getFloat("py",i),
                particles.getFloat("pz",i) );

              if(pid == 11) event_elec++;
              if(pid == 2212) event_proton++;
//---------------------------------------------------------------------
              p  = v3Parts.mag();
              beta_calc = p / Math.sqrt(p*p + 0.938*0.938);
              deltabeta = particles.getFloat("beta",i) - beta_calc ;
              hbeta.fill(particles.getFloat("beta",i));
              hbeta_calc.fill(beta_calc);
              hdeltabeta.fill(deltabeta);              
//--------------------------------------------------------------------
              if(pid == 2212){                                // comment this out to see other particles           
                 hBetaVsPTot.fill(v3Parts.mag(),particles.getFloat("beta",i)); }
        }                                                   // also comment this out for other particles
     if(event_elec>=1&&event_proton>=1){
          counter++;        
          elec = elec + event_elec;
          proton = proton + event_proton; }
     }
  }
}

System.out.println("processed # " + counter + " , electrons : " + elec + " , protons : " + proton ); 
//---------------------------------------------------------------------
LorentzVector  vBeam   = new LorentzVector(0.0,0.0,10.6,10.6);
LorentzVector  vTarget = new LorentzVector(0.0,0.0,0.0,0.938);
LorentzVector electron = new LorentzVector(); 
LorentzVector proton = new LorentzVector(); 
LorentzVector       vW = new LorentzVector(); 
LorentzVector      vQ2 = new LorentzVector();
//---------------------------------------------------------------------
reader.getEvent(event,0);  
while(reader.hasNext()==true){
     reader.nextEvent(event);
     event.read(particles);
     if(particles.getRows()>0){
        for(int i = 0; i < particles.getRows(); i++) {
          int pid = particles.getInt("pid",i);
            if(pid==11){
             electron.setPxPyPzM(
                 particles.getFloat("px",i), 
                  particles.getFloat("py",i),
                  particles.getFloat("pz",i),
                  0.0005
                 );  
             htheta_elec.fill(electron.theta()*(180/3.1415));
             hphi_elec.fill(electron.phi()*(180/3.1415));
            vW.copy(vBeam);
            vW.add(vTarget);
            vW.sub(electron);
             
            vQ2.copy(vBeam);
            vQ2.sub(electron);
             
            hW.fill(vW.mass());
            hQ2.fill(-vQ2.mass2());
            hQ2vW.fill(vW.mass(),-vQ2.mass());
         }
          if(pid==2212){
                proton.setPxPyPzM(
                  particles.getFloat("px",i), 
                  particles.getFloat("py",i),
                  particles.getFloat("pz",i),
                  0.938
                 ); 
          htheta.fill(proton.theta()*(180/3.1415));
          hphi.fill(proton.phi()*(180/3.1415));
          }
       }
     }
//---------------------------------------------------------------------
     event.read(gen);
     if(gen.getRows()>0){
        for(int i = 0; i < gen.getRows(); i++) {
          int pid = gen.getInt("pid",i);
            if(pid==11){
             electron.setPxPyPzM(
                  gen.getFloat("px",i), 
                  gen.getFloat("py",i),
                  gen.getFloat("pz",i),
                  0.0005
                 );
             htheta_elec_gen.fill(electron.theta()*(180/3.1415));
             hphi_elec_gen.fill(electron.phi()*(180/3.1415)); 
            vW.copy(vBeam);
            vW.add(vTarget);
            vW.sub(electron);
             
            vQ2.copy(vBeam);
            vQ2.sub(electron);
             
            hW_gen.fill(vW.mass());
            hQ2_gen.fill(-vQ2.mass2());
            hQ2vW_gen.fill(vW.mass(),-vQ2.mass());
            
            
         }
              if(pid==2212){
                proton.setPxPyPzM(
                  particles.getFloat("px",i), 
                  particles.getFloat("py",i),
                  particles.getFloat("pz",i),
                  0.938
                 ); 
          htheta_gen.fill(proton.theta()*(180/3.1415));
          hphi_gen.fill(proton.phi()*(180/3.1415));
          }
       }
     }
//-------------------------------------------------------------
}

H1F hW_acc=hW.histClone("hW_acc");
hW_acc.divide(hW_gen);
hW_acc.setTitleX("W [GeV]");
hW_acc.setTitle("Acceptance W");
H1F hQ2_acc=hQ2.histClone("hQ2_acc");
hQ2_acc.divide(hQ2_gen); 
hQ2_acc.setTitleX("Q^2 [GeV/c^2]");
hQ2_acc.setTitle("Acceptance Q^2");

H1F htheta_acc=htheta.histClone("htheta_acc");
htheta_acc.divide(htheta_gen);
htheta_acc.setTitleX("Degrees");
htheta_acc.setTitle("Acceptance Theta Proton");
H1F hphi_acc=hphi.histClone("hphi_acc");
hphi_acc.divide(hphi_gen);
hphi_acc.setTitleX("Degrees");
hphi_acc.setTitle("Acceptance Theta Proton");

H1F htheta_acc_elec=htheta.histClone("htheta_acc_elec");
htheta_acc_elec.divide(htheta_gen_elec);
htheta_acc_elec.setTitleX("Degrees");
htheta_acc_elec.setTitle("Acceptance Theta Electron");
H1F hphi_acc_elec=hphi_elec.histClone("hphi_acc_elec");
hphi_acc_elec.divide(hphi_gen_elec);
hphi_acc_elec.setTitleX("Degrees");
hphi_acc_elec.setTitle("Acceptance Theta Electron");
//-------------------------------------------------------------
GraphErrors gW = new GraphErrors();
gW = hW.getGraph();
GraphErrors gW_gen = new GraphErrors();
gW_gen = hW_gen.getGraph();
GraphErrors gW_acc = new GraphErrors();
gW_acc = hW_acc.getGraph();
GraphErrors gQ2 = new GraphErrors();
gQ2 = hQ2.getGraph();
GraphErrors gQ2_gen = new GraphErrors();
gQ2_gen = hQ2_gen.getGraph();
GraphErrors gQ2_acc = new GraphErrors();
gQ2_acc = hQ2_acc.getGraph();
//-------------------------------------------------------------
//gW.setFillColor(8);
//gW_gen.setFillColor(8);
//gW_acc.setFillColor(8);
//gQ2.setFillColor(6);
//gQ2_gen.setFillColor(6);
//gQ2_acc.setFillColor(6);




gW.setTitleX("W [GeV]");
gW.setTitle("Reconstructed W");
gQ2.setTitleX("Q^2 [GeV/c^2]");
gQ2.setTitle("Reconstructed Q^2");
gW_gen.setTitleX("W [GeV]");
gW_gen.setTitle("Generated W");
gQ2_gen.setTitleX("Q^2 [GeV/c^2]");
gQ2_gen.setTitle("Generated Q^2");
gW_acc.setTitleX("W [GeV]");
gW_acc.setTitle("Acceptance W");
gQ2_acc.setTitleX("Q^2 [GeV/c^2]");
gQ2_acc.setTitle("Acceptance Q^2");
htheta.setTitleX("Degrees");
htheta.setTitle("Reconstructed Theta");
hphi.setTitleX("Degrees");
hphi.setTitle("Reconstructed Phi");
htheta_gen.setTitleX("Degrees");
htheta_gen.setTitle("Generated Theta");
hphi_gen.setTitleX("Degrees");
hphi_gen.setTitle("Generated Phi");
hbeta.setTitle("Measured #beta ");
hbeta_calc.setTitle("Calculated #beta ");
hdeltabeta.setTitle(" #delta #beta ");


REC.divide(2,2);
REC.cd(0).draw(gW);
REC.cd(1).draw(gQ2);
REC.cd(2).draw(hBetaVsPTot);
REC.cd(3).draw(hQ2vW);

GEN.divide(3,1);
GEN.cd(0).draw(gW_gen);
GEN.cd(1).draw(gQ2_gen);
GEN.cd(2).draw(hQ2vW_gen);

W.divide(1,3);
W.cd(0).draw(gW);
W.cd(1).draw(gW_gen);
W.cd(2).draw(gW_acc);

Q2.divide(1,3);
Q2.cd(0).draw(gQ2);
Q2.cd(1).draw(gQ2_gen);
Q2.cd(2).draw(gQ2_acc);

angles.divide(4,3);
angles.cd(0).draw(htheta);
angles.cd(1).draw(hphi);
angles.cd(2).draw(htheta_gen);
angles.cd(3).draw(hphi_gen);
angles.cd(4).draw(htheta_acc);
angles.cd(5).draw(hphi_acc);
angles.cd(6).draw(htheta_elec);
angles.cd(7).draw(hphi_elec);
angles.cd(8).draw(htheta_gen_elec);
angles.cd(9).draw(hphi_gen_elec);
angles.cd(10).draw(htheta_acc_elec);
angles.cd(11).draw(hphi_acc_elec);

Tbeta.divide(1,3);
Tbeta.cd(0).draw(hbeta);
Tbeta.cd(1).draw(hbeta_calc);
Tbeta.cd(2).draw(hdeltabeta);

gW.setMarkerSize(2);
gW_gen.setMarkerSize(2);
gW_acc.setMarkerSize(2);
gQ2.setMarkerSize(2);
gQ2_gen.setMarkerSize(2);
gQ2_acc.setMarkerSize(2);
gW.setLineColor(2);
gW_gen.setLineColor(2);
gW_acc.setLineColor(2);
gQ2.setLineColor(2);
gQ2_gen.setLineColor(2);
gQ2_acc.setLineColor(2);


//TDirectory dir = new TDirectory();
//dir.mkdir("/prosearch");
//dir.cd("prosearch");

 
// dir.addDataSet(hW);  
// dir.addDataSet(hW_gen);
// dir.addDataSet(hW_acc);
// dir.addDataSet(hQ2);
// dir.addDataSet(hQ2_gen);
// dir.addDataSet(hQ2_acc);
// dir.addDataSet(hQ2vW);
// dir.addDataSet(hBetaVsPTot);
// String histFile = "myfile.hipo";  // declare the output file name
// dir.writeFile(histFile);          // write the file
